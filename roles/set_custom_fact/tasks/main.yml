---
- include_vars: group_vars/{{ ansible_architecture }}.yml
  tags: [ 'master', 'custom', 'rename', 'update','idc_import','package_management','kalite_import' ]

- debug: msg="Start playbook {{ ansible_date_time["date"] }} - {{ ansible_date_time["time"] }}"
  tags: [ 'master', 'custom', 'rename', 'update','idc_import','package_management','kalite_import' ]

- name: ensure custom facts directory exists
  file: path=/etc/ansible/facts.d recurse=yes state=directory
  tags:
    - master

- name: Create installed_software.fact file
  file: path=/etc/ansible/facts.d/installed_software.fact state=touch
  tags:
    - master

- name: Register if the user has been build is own configuration file
  ini_file: dest=/etc/ansible/facts.d/installed_software.fact
    section=management
    option=own_config_file
    value={{ own_config_file }}
  when: ansible_local.installed_software.management.own_config_file is undefined 
    or own_config_file|bool == True
  register: set_config_file
  tags: ['custom','update','rename']

- name: reload ansible_local
  setup: filter=ansible_local
  tags: ['custom', 'rename', 'update','idc_import','package_management','kalite_import' ]

- name: install custom fact module for device list
  copy: src=device_list.fact 
    dest=/etc/ansible/facts.d/device_list.fact 
    mode=0666
  when: ansible_local.installed_software.management.own_config_file is defined
    and ansible_local.installed_software.management.own_config_file|bool == False
  tags: ['custom', 'rename', 'update','idc_import','package_management','kalite_import' ]

- name: Check if the device has already a name defined
  stat: path=/etc/firstStart.csv
  register: firststart
  tags: ['master', 'custom']

- block:

  - name: Generate a random number for the idc_uniq_device_name
    set_fact: idc_uniq_device_name="{{ ideascube_project_name }}_{{ 1000 | random }}"
      generic_project_name={{ ideascube_project_name |replace("_", "-") }}

  - name: Set device hostname by replacing _ by -
    shell: hostnamectl set-hostname {{ idc_uniq_device_name |replace("_", "-") }}

  - name: reload ansible_hostname
    setup: filter=ansible_hostname

  rescue:

  - debug: msg="No bus connection is available yet, set hostname manually"

  - name: Set device hostname by replacing _ by -
    shell: cat {{ idc_uniq_device_name |replace("_", "-") }} > /etc/hostname

  - name: reload ansible_hostname
    setup: filter=ansible_hostname

  when: firststart.stat.exists == false or firststart is undefined
  tags: ['custom', 'rename', 'master']

- debug: msg="My name is {{ ansible_hostname }}"
  tags: [ 'master', 'custom', 'rename', 'update','idc_import','package_management','kalite_import' ]

- block:
  - name: Check if device name match a known name in device_list.fact
    command: grep -w {{ ansible_hostname | regex_replace('-\d+', '') }} /etc/ansible/facts.d/device_list.fact

  rescue:
  - fail: msg="Device name does not correspond to any records in /etc/ansible/facts.d/device_list.fact"

  tags: ['custom','rename','update']

- name: Register managed_by_bsf var from facts.d
  set_fact: managed_by_bsf="{{ ansible_local.installed_software.management.managed_by_bsf|default(False) }}"
  tags:
    - update

- name: register old name
  set_fact: old_hostname="{{ansible_hostname | replace("-", "_") }}"
  tags:
    - rename

- block:

  - name: Check if a koombookDoctor cache machine is present on the local network
    wait_for: host="{{ koombookDoctor }}" port=80 state=present timeout=3
    register: cache_machine

  rescue:
  
  - debug: msg="No cache machine has been detected on the local network"

  tags: ['custom', 'update','idc_import','package_management','kalite_import' ]

- name: Register if the device is managed by BSF
  ini_file: dest=/etc/ansible/facts.d/installed_software.fact
    section=management
    option=managed_by_bsf
    value={{Â managed_by_bsf }}
  tags: 
    - custom

- name: Register hostname in facts
  ini_file: dest=/etc/ansible/facts.d/installed_software.fact
    section=management
    option=hostname
    value={{ hostname }}
  when: ansible_local.installed_software.management.hostname is undefined
  tags: ['custom','update','rename']

- name: reload ansible_local
  setup: filter=ansible_local
  tags: [ 'master', 'custom', 'rename', 'update','idc_import','package_management','kalite_import' ]

- name: Write all the variables in /etc/firstStart.csv
  copy: content="id,{{ ansible_date_time["date"] }},{{ ansible_date_time["time"] }},{{ idc_uniq_device_name }},{{ ansible_machine_id }},{{ ansible_default_ipv4["macaddress"] }},{{ ansible_default_ipv4["address"] }}\n" dest=/etc/firstStart.csv
  when: firststart.stat.exists == False or firststart is undefined
  tags: ['custom','rename']

- name: Send this file over the central_server
  raw: cat /etc/firstStart.csv | ssh {{ central_server }} "cat >> ./ansible/UUID/firstStart.csv"
  when: managed_by_bsf|bool and firststart.stat.exists == False or firststart is undefined
  tags: ['custom','rename']

- name: If /etc/firstStart.csv exist then hostname is already defined
  set_fact: idc_uniq_device_name="{{ ansible_hostname }}"
  when: firststart.stat.exists is defined and firststart.stat.exists or firststart is undefined
  tags: ['custom','rename']

- name: Set variable generic_project_name
  set_fact: generic_project_name={{ ansible_hostname | regex_replace('-\d+', '') }}
  tags: [ 'master', 'custom', 'rename', 'update','idc_import','package_management','kalite_import' ]
