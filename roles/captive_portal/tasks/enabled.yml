---
- name: Install conntrack
  apt: name={{item}} state=latest
  with_items:
    - conntrack
    - uwsgi-plugin-python
  tags: ['custom', 'update']

- name: Create /var/www/captiveportal folder
  file:
    path: /var/www/captiveportal
    owner: ideascube
    group: ideascube
    mode: 0755
    state: directory
  tags: ['custom', 'update']
  
- name: Copy captive portal script to /var/www/captiveportal
  template:
    src: cap.py.j2
    dest: /var/www/captiveportal/cap.py
    owner: ideascube
    group: ideascube
    mode: 0755
  notify: restart uwsgi
  tags: ['custom', 'update','rename']

- name: Add nginx specific configuration file
  copy:
    src: nginx-captiveportal
    dest: /etc/nginx/sites-available/captiveportal
    owner: root
    group: root
    mode: 0644
  tags: ['custom', 'update']

- name: Make sure ideascube is not default_server
  lineinfile:
    dest: /etc/nginx/sites-available/ideascube
    regexp: '^(.*)listen(.*)default_server(.*)'
    line: "    listen      80 ;"
    backrefs: yes
  tags: ['custom', 'update']

- name: Enable captive portal vhost
  file: src=/etc/nginx/sites-available/captiveportal dest=/etc/nginx/sites-enabled/captiveportal state=link
  notify: restart nginx
  tags: ['custom', 'update']

- name: Start dnsmasq-spoof.conf file by default - forcing short TTL
  lineinfile: 
    dest: /etc/default/dnsmasq
    regexp: 'DNSMASQ_OPTS='
    line: 'DNSMASQ_OPTS="--conf-file=/etc/dnsmasq.conf --local-ttl=600"'
    state: present
  notify: restart dnsmasq
  tags: ['custom', 'update'] 
              
- name: Create /etc/nginx/ssl folder
  file:
    path: /etc/nginx/ssl
    owner: root
    group: root
    mode: 0644
    state: directory
  tags: ['custom', 'update']

- name: Copy captive portal public key
  copy: 
    src: ideascube.crt
    dest: /etc/nginx/ssl/ideascube.crt
    owner: root
    group: root
    mode: 0644
  notify: restart nginx
  tags: ['custom', 'update']

- name: Copy captive portal private key
  copy:
    src: ideascube.key
    dest: /etc/nginx/ssl/ideascube.key
    owner: root
    group: root
    mode: 0640
  notify: restart nginx
  tags: ['custom', 'update']

- name: Copy new catch-all redirect 301 vhost
  template:
    src: redirect.j2
    dest: /etc/nginx/sites-enabled/redirect
  tags: ['custom', 'update','rename']

- name: Add UWSGI specific configuration file
  copy:
    src: captive.ini
    dest: /etc/uwsgi/apps-available/captive.ini
    owner: root
    group: root
    mode: 0644
  tags: ['custom', 'update']

- name: Enable captive.ini for UWSGI
  file: src=/etc/uwsgi/apps-available/captive.ini dest=/etc/uwsgi/apps-enabled/captive.ini state=link
  notify: restart uwsgi
  tags: ['custom', 'update']

- name: Copy Systemd script to set /etc/default/dnsmasq default options
  copy:
    src: clean-up.service
    dest: /etc/systemd/system/clean-up.service
  tags: ['custom', 'update']

- name: Enabling systemd service clean-up.service
  service: enabled=yes name=clean-up
  tags: ['custom', 'update']

- name: Copy shell script that actually does the job
  copy:
    src: clean-up-dnsmasq.sh
    dest: /usr/local/bin/clean-up-dnsmasq.sh
    owner: root
    group: root
    mode: 755
  tags: ['custom', 'update']

- name: Copy dnsmasq script for NetworkManager
  template:
    src: dnsmasq.j2
    dest: /etc/NetworkManager/dispatcher.d/03dnsmasq
    mode: 0755
  tags: ['custom', 'update']

- name: Copy clear_iptables.sh to /usr/bin/local
  copy:
    src: clear_iptables.sh
    dest: /usr/local/bin/clean_iptables.sh
    owner: root
    group: root
    mode: 0755
  tags: ['custom', 'update']

- name: Add a cron entry to clean iptables rules
  cron:
    name: "Clear dead connections from CAPTIVE_PASSLIST"
    minute: "1"
    hour: "*/4"
    job: "/usr/local/bin/clean_iptables.sh"
    state: present
  tags: ['custom', 'update']

- name: Load current IPtables configuration
  shell: /etc/network/if-up.d/iptables
  tags: ['custom', 'update']

- name: Create iptables empty chains
  command: "{{item}}"
  with_items:
    - /sbin/iptables -t nat -N CAPTIVE_HTTP
    - /sbin/iptables -t nat -N CAPTIVE_HTTPS
    - /sbin/iptables -t nat -N CAPTIVE_PASSLIST
  tags: ['custom', 'update']
  ignore_errors: yes

- name: Purge all chains
  command: /sbin/iptables -t nat -F "{{item}}"
  with_items:
    - PREROUTING
    - CAPTIVE_HTTPS
    - CAPTIVE_HTTP
    - CAPTIVE_PASSLIST
  tags: ['custom', 'update']

- name: Send to CAPTIVE_HTTP if destination *:80/tcp
  command: /sbin/iptables -t nat -A PREROUTING -p tcp -m tcp ! -d "{{ item.dst }}" --dport 80 -m iprange --src-range {{ item.src }} -j CAPTIVE_HTTP
  with_items:
    - dst: "{{ hotspot_ip }}"
      src: "{{ hotspot_source_range }}"
    - dst: "{{ external_hotspot_ip }}"
      src: "{{ external_hotspot_source_range }}"
  tags: ['custom', 'update']

- name: Send to CAPTIVE_HTTPS if destination *:443/tcp
  command: /sbin/iptables -t nat -A PREROUTING -p tcp -m tcp ! -d "{{ item.dst }}" --dport 443 -m iprange --src-range {{ item.src }} -j CAPTIVE_HTTPS
  with_items:
    - dst: "{{ hotspot_ip }}"
      src: "{{ hotspot_source_range }}"
    - dst: "{{ external_hotspot_ip }}"
      src: "{{ external_hotspot_source_range }}"
  tags: ['custom', 'update']


- name: From CAPTIVE_HTTP, send to CAPTIVE_PASSLIST
  iptables:
    table: nat
    chain: CAPTIVE_HTTP
    protocol: tcp
    jump: CAPTIVE_PASSLIST
  tags: ['custom', 'update']

- name: From CAPTIVE_HTTPS, send to CAPTIVE_PASSLIST
  iptables:
    table: nat
    chain: CAPTIVE_HTTPS
    protocol: tcp
    jump: CAPTIVE_PASSLIST
  tags: ['custom', 'update']

- name: DNAT HTTP to hotspot_ip:82
  iptables:
    table: nat
    chain: CAPTIVE_HTTP
    protocol: tcp
    jump: DNAT
    to_destination: "{{ item }}:82"
    comment: Redirect HTTP traffic to server port 82
  with_items:
    - "{{ hotspot_ip }}"
    - "{{external_hotspot_ip}}"
  tags: ['custom', 'update']

- name: DNAT HTTPS to hotspot_ip:83
  iptables:
    table: nat
    chain: CAPTIVE_HTTPS
    protocol: tcp
    jump: DNAT
    to_destination: "{{ item }}:83"
    comment: Redirect HTTPS traffic to server port 83
  with_items:
    - "{{ hotspot_ip }}"
    - "{{external_hotspot_ip}}"
  tags: ['custom', 'update']

- name: Last CAPTIVE_PASSLIST rules RETURN to calling chain
  iptables:
    table: nat
    chain: CAPTIVE_PASSLIST
    protocol: tcp
    jump: RETURN
  tags: ['custom', 'update']

- name: Overwrite /etc/iptables.rules to include new rules
  shell: /sbin/iptables-save > /etc/iptables.rules
  tags: ['custom', 'update']
