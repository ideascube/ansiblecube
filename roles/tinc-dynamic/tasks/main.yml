---
- name: check we can use /dev/net/tun
  stat: path=/dev/net/tun
  register: tundevice
  tags: ['custom','update']

- name: Sorry, tinc requires /dev/net/tun. Aborting.
  fail: msg="no /dev/net/tun device found."
  when: tundevice.stat.exists == false
  tags: ['custom','update']

- name: Generate new mac address
  shell: echo "{{ ansible_hostname }}"|md5sum|sed 's/^\(..\)\(..\)\(..\)\(..\)\(..\).*$/02:\1:\2:\3:\4:\5/' ; echo
  register: tinc_if_mac
  tags: ['custom','update','rename']

- debug: msg="{{ tinc_if_mac.stdout }}"
  tags: ['custom','update','rename']

- name: Remove old vpn interface
  blockinfile:
    dest: "/etc/network/interfaces"
    marker: "# {mark} ANSIBLE MANAGED BLOCK"
    content: ""
  tags: ['update','rename']

- name: insert/update vpn_name configuration in /etc/network/interfaces
  blockinfile: 
    block: "{{ lookup('template', 'vpn_interface.j2') }}" 
    dest: "/etc/network/interfaces"
    marker: "## {mark} {{vpn_name}} VPN interface"
  tags: ['custom','update','rename']

- name: build a hostname for tinc, which doesn't like hyphens
  set_fact: tinc_localhost_name="{{ ansible_hostname | replace("-", "_") }}"
  tags: ['custom','update','rename']

- name: Check if the RSA key is present in tinc key file
  shell: grep -F 'RSA' /etc/tinc/{{ vpn_name }}/hosts/{{tinc_localhost_name}} ; echo
  register: rsa_in_key_file
  tags: ['custom','update','rename']

- name: Remove empty public key file
  file: path=/etc/tinc/{{ vpn_name }}/hosts/{{tinc_localhost_name}} state=absent
  when: rsa_in_key_file is defined and rsa_in_key_file.stdout == "" 
  tags: ['custom','update','rename']

- name: Remove private key file
  file: path=/etc/tinc/{{ vpn_name }}/rsa_key.priv state=absent
  when: rsa_in_key_file is defined and rsa_in_key_file.stdout == "" 
  tags: ['custom','update','rename']

- name: Install tinc, rsync
  apt:
    name: "{{ item }}"
    state: present
    cache_valid_time: 3600
  with_items:
  - tinc
  - rsync
  tags: ['custom','update']

- name: ensure tinc vpn name directory exists
  file: >
    path=/etc/tinc/{{ vpn_name }}/hosts
    recurse=True
    state=directory
  tags: ['custom','update','rename']

- name: ensure tinc.conf exists for vpn name
  template: >
    src=tinc.conf.j2
    dest=/etc/tinc/{{ vpn_name }}/tinc.conf
  tags: ['custom','update','rename']

- name: Add interfaces controler for remote vpn_master_server
  copy: src=hosts/vpn_master_server-up dest=/etc/tinc/{{ vpn_name }}/hosts/{{vpn_master_server}}-up mode=0750
  tags: ['custom','update']

- name: Add interfaces controler for remote vpn_master_server
  copy: src=hosts/vpn_master_server-down dest=/etc/tinc/{{ vpn_name }}/hosts/{{vpn_master_server}}-down mode=0750
  tags: ['custom','update']

- name: add pubkeys for tincmaster
  copy: src=hosts/tincmaster dest=/etc/tinc/{{ vpn_name }}/hosts/tincmaster mode=0750
  when: vpn_master_server == "tincmaster"
  tags: ['custom','update']

- name: set default options for tinc
  template: >
    src=default.j2
    dest=/etc/default/tinc
  notify:
    - reload tinc
  tags: ['custom','update']

- name: Add vpn_name to /etc/tinc/nets.boot file
  lineinfile: 
    dest: /etc/tinc/nets.boot
    line: '{{ vpn_name }}'
    create: yes
  notify:
    - restart tinc
  tags: ['custom','update']

- name: create tinc private key
  shell: tincd -n {{ vpn_name }} -K4096
  args:
    creates: /etc/tinc/{{ vpn_name }}/rsa_key.priv
  when: rsa_in_key_file is defined and rsa_in_key_file.stdout == "" 
  tags: ['custom','update','rename']

- name: create tinc-up file
  template: >
    src=tinc-up.j2
    dest=/etc/tinc/{{ vpn_name }}/tinc-up
    mode=0755
  notify:
    - reload tinc
  tags: ['custom','update','rename']

- name: create tinc-down file
  template: >
    src=tinc-down.j2
    dest=/etc/tinc/{{ vpn_name }}/tinc-down
    mode=0755
  notify:
    - reload tinc
  tags: ['custom','update','rename']

- name: Make sure tinc logs are rotated
  copy: src=tinc.logrotate dest=/etc/logrotate.d/tinc mode=0644
  tags: ['custom','update']

- name: send the public key to central nodes
  shell: rsync /etc/tinc/{{ vpn_name }}/hosts/{{tinc_localhost_name }}  {{ central_server }}:/ansible/tinc-{{ vpn_name }}/
  tags: ['custom','update','rename','requires_internet']
