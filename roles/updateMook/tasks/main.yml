---
- include_vars: group_vars/{{ ansible_architecture }}.yml

- name: Set the central server variable
  set_fact: central_server_host="http://api.bsfcampus.org/"

- stat: path=/var/lib/ansible/updateMook-{{version}}.csv
  register: st

- name: Install uwsgi
  apt: name={{ item }} state=present
  with_items:
  - uwsgi
  - uwsgi-plugin-python
  when: st.stat.exists == False

- name: Configure git to avoid so git clone error
  become_user: ideascube
  command: git config --global http.postBuffer 524288000
  when: st.stat.exists == False
  
####
# BACK END CONFIGURATION
####
- file: path={{ mook_path }}/{{ mook_name }}/api state=absent
  when: st.stat.exists == False

- name: Clone mook api
  become_user: ideascube
  git: repo=ssh://git@altssh.bitbucket.org:443/bsfcampus/mook-bsf-api.git dest={{ mook_path }}/{{ mook_name }}/api accept_hostkey=yes update=yes depth=1
  when: st.stat.exists == False

- name: Install python requierment
  pip: requirements=requirements.txt chdir={{ mook_path }}/{{ mook_name }}/api virtualenv_command=/usr/local/bin/virtualenv virtualenv={{ mook_path }}/{{ mook_name }}/api/env
  when: st.stat.exists == False

- name: Copy settings_local config files
  template: src=settings_local.py.j2 dest={{ mook_path }}/{{ mook_name }}/api/settings_local.py
  when: st.stat.exists == False

- name: Retrieve KoomBook info 
  set_fact: koombookName="{{ lookup('csvfile', 'id file=/etc/firstStart.csv delimiter=, col=3') }}" uuid="{{ lookup('csvfile', 'id file=/etc/firstStart.csv delimiter=, col=4') }}"
  when: st.stat.exists == False
  ignore_errors: yes
  
- name: add conf for KoomBook
  lineinfile: dest={{ mook_path }}/{{ mook_name }}/api/settings_local.py regexp='' insertafter=EOF line='    CENTRAL_SERVER_KEY = \"{{koombookName}}\" \n    CENTRAL_SERVER_SECRET = \"{{uuid}}\"' owner={{username}} group={{username}} mode=755
  when: st.stat.exists == False
  ignore_errors: yes
  
- name: Setup startup file for uwsgi
  copy: src=settings_central.py dest={{ mook_path }}/{{ mook_name }}/api owner={{username}} group={{username}} mode=755
  when: st.stat.exists == False

- name: Create tmp directory
  file: path=/media/hdd/{{ mook_name }}/static/tmp state=directory mode=0755 owner={{ username }} group={{ username }}
  when: st.stat.exists == False

- name: Create Symbolic link
  file: src=/media/hdd/{{ mook_name }}/static dest={{ mook_path }}/{{ mook_name }}/static state=link
  when: st.stat.exists == False

####
# FRONT END CONFIGURATION
####
- file: path={{ mook_path }}/{{ mook_name }}/front state=absent
  when: st.stat.exists == False

- name: Clone mook front
  become_user: ideascube
  git: repo=ssh://git@altssh.bitbucket.org:443/bsfcampus/bsf-campus.git dest={{ mook_path }}/{{ mook_name }}/front accept_hostkey=yes update=yes depth=1
  when: st.stat.exists == False

- name: download vendor package
  get_url: url={{filer_bsf}}/vendor.zip dest=/tmp/vendor.zip
  when: st.stat.exists == False

- name: unarchive the vendor package
  become_user: ideascube
  unarchive: src=/tmp/vendor.zip dest={{ mook_path }}/{{ mook_name }}/front copy=no
  when: st.stat.exists == False

- name: Copy config.js config files
  template: src=config.js.j2 dest={{ mook_path }}/{{ mook_name }}/front/config.js
  when: st.stat.exists == False

- name: Fix rights
  file: path={{ mook_path }}/{{ mook_name }} state=directory owner={{ username }} group={{ username }} recurse=yes
  when: st.stat.exists == False

- name: Copy uwsgi config files
  template: src=uwsgi-api.ini.j2 dest={{ mook_path }}/{{ mook_name }}/api/uwsgi-api.ini
  notify: restart uwsgi
  when: st.stat.exists == False

- name: Symbolic link for wsgi ini file
  file: src={{ mook_path }}/{{ mook_name }}/api/uwsgi-api.ini dest=/etc/uwsgi/apps-enabled/uwsgi-{{ mook_name }}-api.ini state=link
  notify: restart uwsgi
  when: st.stat.exists == False

- name: Fix rights on static
  file: path=/media/hdd/{{ mook_name }}/ state=directory owner={{ username }} group={{ username }} recurse=yes
  notify: restart nginx
  when: st.stat.exists == False

- name: Delete old way of synching 
  lineinfile: dest=/etc/rc.local state=absent regexp='su ideascube -c'
  when: st.stat.exists == False

####
# MongoDB
####

- name: Disable service mongodb
  service: name=mongodb enabled=no
  when: st.stat.exists == False

- name: Delete sysvinit file
  file: path=/etc/init.d/mongodb state=absent
  when: st.stat.exists == False

- name: Copy mongodb repair script
  copy: src=mongo_repair.sh dest=/opt/mongo/mongo_repair.sh mode=755
  when: st.stat.exists == False

- name: Fix rights on log dir
  file: path=/var/log/mongodb/ state=directory owner=mongodb group=nogroup recurse=yes

- name: Setup startup file
  copy: src=mongodb.service dest=/etc/systemd/system/mongodb.service owner=root group=root
  when: st.stat.exists == False

- name: Create a mongodb service override unit directory
  file: dest=/etc/systemd/system/mongodb.service.d state=directory owner=root group=root
  when: st.stat.exists == False

- name: Drop in a unit file so uwsgi starts after mongodb
  copy: src=before-uwsgi.conf dest=/etc/systemd/system/mongodb.service.d/before-uwsgi.conf owner=root group=root
  when: st.stat.exists == False

- name: Enable service mongodb
  service: name=mongodb enabled=yes
  when: st.stat.exists == False

- name: Copy new uwsgi startup file. Uwsgi must start after MongoDB
  copy: src=uwsgi.service dest=/etc/systemd/system/uwsgi.service owner=root group=root
  when: st.stat.exists == False


####
# Systemd startup script
####

- name: Copy template for systemd mook-sync
  template: src=mook-sync.service.j2 dest=/etc/systemd/system/mook-sync.service
  when: st.stat.exists == False

- name: Enable service mook-sync
  service: name=mook-sync enabled=yes
  notify: restart uwsgi
  when: st.stat.exists == False

####
# update
####

- tasks:
  include: ../../../post_tasks.yml task=updateMook version={{version}}
  when: st.stat.exists == False

- name: Update is over, let's reboot!
  command: reboot
  when: st.stat.exists == False