---
- include_vars: group_vars/{{ ansible_architecture }}.yml
  tags: ['master', 'custom','rename','update']

- name: Register managed_by_bsf var from facts.d
  set_fact: managed_by_bsf="{{ ansible_local.installed_software.management.managed_by_bsf|default(False) }}"
  tags:
  - update

- name: Check if the device has already a name defined
  stat: path=/etc/firstStart.csv
  register: firststart
  tags: ['master', 'custom']

- name: Generate a random number for the idc_uniq_device_name
  set_fact: idc_uniq_device_name="{{ ideascube_project_name }}_{{ 1000 | random }}"
    generic_project_name={{ ideascube_project_name |replace("_", "-") }}
  when: firststart.stat.exists == False or firststart is undefined
  tags: ['master', 'custom','rename']

- name: Remove udev rules for wifi 
  file: path=/etc/udev/rules.d/70-persistent-net.rules state=absent
  tags: ['custom','rename']

- name: Write all the variables in /etc/firstStart.csv
  copy: content="id,{{ ansible_date_time["date"] }},{{ ansible_date_time["time"] }},{{ idc_uniq_device_name }},{{ ansible_machine_id }},{{ ansible_default_ipv4["macaddress"] }},{{ ansible_default_ipv4["address"] }}\n" dest=/etc/firstStart.csv
  when: firststart.stat.exists == False or firststart is undefined
  tags: ['custom','rename']

## Maybe this could be pushed during preseed
- name: Make sure central_server pubkey is in known_hosts
  copy: src=ssh_known_hosts dest=/etc/ssh/ssh_known_hosts
          owner=root group=root mode=0644
  tags: ['custom','update','rename']

- name: Send this file over the central_server
  raw: cat /etc/firstStart.csv | ssh {{ central_server }} "cat >> ./ansible/UUID/firstStart.csv"
  when: managed_by_bsf|bool and firststart.stat.exists == False or firststart is undefined
  tags: ['custom','rename']

- name: Drop a complete source.list
  copy: src=source.list dest=/etc/apt/sources.list
  when: ansible_lsb.id == "Debian"
  tags: ['master','update']

- name: Run apt-get update  
  shell: apt-get update ; echo
  register: result
  tags: ['master','custom','update']

- name: Fix broken package
  shell: dpkg --configure -a
  when: "'dpkg --configure -a' in result.stderr"
  tags: ['master','custom','update']

- name: Remove unwanted packages before upgrading
  apt: name={{ item }} state=absent purge=yes
  with_items:
   - apache2
   - apache2-mpm-worker
   - apache2-utils
   - apache2.2-bin
   - apache2.2-common
   - btrfs-tools
   - figlet
   - toilet
   - bluez
   - fping
   - stress
   - iperf
   - iotop
   - lirc
   - apt-listchanges
   - clipit
   - sslh
  tags: ['master','update']

- name: Install all required package
  apt: name={{ item }} state=latest
  with_items:
   - python-pip
   - python-dev
   - python-setuptools
   - python-virtualenv
   - virtualenv
   - git
   - sudo
   - lsb-release
   - vim
   - locate
   - git
   - unzip
   - bash-completion
   - aptitude
   - ntpdate
   - fake-hwclock
   - hdparm
   - ncurses-term
   - libffi-dev
   - libssl-dev
   - tree
   - screen
   - iftop
   - tmux
   - mtr-tiny
   - libwww-perl
   - httpie
   - lshw
   - hwinfo
   - sqlite3
   - elinks
   - mosh
  tags: ['master','custom','update']

- name: Install avahi packages
  apt: name={{ item }} state=latest
  with_items:
   - avahi-daemon
   - libnss-mdns
   - avahi-utils
  tags: ['custom','update']

- name: Upgrade pip to the latest version
  pip: name=pip version=9.0.1
  tags: ['master', 'custom','update']

- name: Check for Ralink Wireless Network Adapter
  shell: lsusb | grep -F "Ralink Technology" ; echo
  register: lsusb_ralink
  tags: ['master', 'custom']

- include: ralink.yml
  when: lsusb_ralink.stdout != "" and (ansible_architecture == 'x86_64' or ansible_architecture == 'i386')
  tags: ['master', 'custom']

- name: Check for Realtek Wireless Network Adapter
  shell: lspci | grep -F "Realtek Semiconductor" ; echo
  register: lspci_realtek
  tags: ['master', 'update']

- include: realtek.yml
  when: lspci_realtek.stdout != "" and (ansible_architecture == 'x86_64' or ansible_architecture == 'i386')

- name: Stat /dev/sda1 for later use on Koombooks
  stat: path=/dev/sda1
  register: sda1
  tags: ['custom','update']

- name: Test if a fex file exist, if yes, the device is an Olimex
  stat: path=/boot/bin/lime2.bin
  register: fex_file
  tags: ['custom','update']

- name: Test if a fex file exist, if yes, the device is an Olimex
  stat: path=/boot/script.bin
  register: fex_file2
  tags: ['custom','update']

- include: lime2.yml
  when: fex_file.stat.exists is defined and fex_file.stat.exists 
    or fex_file2.stat.exists is defined and fex_file2.stat.exists

- include: scaleway-arm.yml
  when: ansible_dns.domain|default(omit) == "{{ crashbook_dns_domain }}" and ansible_architecture == "armv7l"
  tags: ['custom','update']

- include: raspberry.yml
  when: ansible_lsb.id == "Raspbian" and ansible_architecture == "armv7l"
  tags: ['custom','update']

- name: List services to restart (1/2)
  shell: checkrestart | grep ^service | awk '{print $2}'
  register: services
  changed_when: False
  tags:
    - master

- name: Allow unauthenticated packages
  lineinfile: dest=/etc/apt/apt.conf.d/9999IDEASCUBEISABADBADBOY line='APT::Get::AllowUnauthenticated "true";' create=yes
  tags: ['master', 'custom']

- name: Upgrade packages
  apt: upgrade=safe
  tags: ['master', 'custom']

- name: Remove the unauthenticated hack
  file: path=/etc/apt/apt.conf.d/9999IDEASCUBEISABADBADBOY state=absent
  tags: ['master', 'custom']

- name: Drop hosts file on device
  template: src=hosts.j2 dest=/etc/hosts
  when: firststart.stat.exists == False or firststart is undefined
  tags: ['master', 'custom','rename']

- name: Drop hosts file on device
  template: src=hosts_update.j2 dest=/etc/hosts
  tags:
    - update

- name: An hostname can not have _ so we are switching to -, python can not have - so using _ sometime too
  shell: echo {{ idc_uniq_device_name |replace("_", "-") }} > /etc/hostname
  when: firststart.stat.exists == False or firststart is undefined
  tags: ['master', 'custom','rename']

- name: If /etc/firstStart.csv exist then hostname is already defined
  set_fact: idc_uniq_device_name="{{ ansible_hostname }}"
  when: firststart.stat.exists is defined and firststart.stat.exists or firststart is undefined
  tags: ['custom','rename']

- name: Create an ideascube user on the system
  user: name={{ username }}
        shell=/bin/bash
        groups="sudo,www-data,adm,staff"
        home="/home/{{ username }}"
        generate_ssh_key=yes
        ssh_key_bits=2048
        ssh_key_file=.ssh/id_rsa
        password={{ password }}
        update_password={{Â managed_by_bsf|bool | ternary('always', 'on_create') }}
  tags:
    - master

- name: Set up authorized_keys for the ideascube user
  authorized_key: user={{username}} key="{{ item }}"
  with_file:
    - florian.pub
    - gregoire.pub
    - tom.pub
    - steven.pub
  when: managed_by_bsf|bool
  tags: ['master', 'update']

- name: Set up authorized_keys for root user
  authorized_key: user=root key="{{ item }}"
  with_file:
    - florian.pub
    - gregoire.pub
    - tom.pub
    - steven.pub
  when: managed_by_bsf|bool
  tags: ['master', 'update']

- name: Add locales
  locale_gen: name="{{ item }}" state=present
  with_items:
  - fr_FR.UTF-8
  - en_US.UTF-8
  - en_GB.UTF-8
  tags: ['master', 'update']

- name: Copy a blank rc.local
  copy: src=rc.local dest=/etc/rc.local owner=root group=root mode=0644 backup=yes
  tags:
    - master

- name: Copy .bashrc for root
  copy: src=bashrc dest=/root/.bashrc owner=root
  tags:
    - master

- name: Copy the global vimrc file
  copy: src=vimrc.local dest=/etc/vim/vimrc.local owner=root mode=0644
  tags:
    - master

- name: Copy .bashrc for new username
  copy: src=bashrc dest=/home/{{ username }}/.bashrc owner={{ username }}
  tags:
    - master

- name: Copy visudo file for ideascube user
  template: src=visudo.j2 dest=/etc/sudoers.d/shutdown
    owner=root group=root mode=0440 validate="/usr/sbin/visudo -cf %s"
  tags:
    - master

- name: Create local directory to work from
  file: path=/var/lib/ansible/local state=directory owner=root group=root mode=0751
  tags:
    - master

- name: Create ansible hosts directory to work from
  file: path=/etc/ansible/ state=directory owner=root group=root mode=0751
  tags:
    - master

- name: Copy ansible inventory file to client
  copy: src=hosts dest=/etc/ansible/hosts
          owner=root group=root mode=0644
  tags:
    - master

- name: Remove the existing localtime file
  file: path=/etc/localtime state=absent
  tags: ['custom','rename']

- name: Set a new localtime file corresponding to the timezone
  file: src=/usr/share/zoneinfo/{{ timezone }} dest=/etc/localtime state=link force=yes
  tags: ['custom','rename']

- name: Set timezone variables
  copy: content={{ timezone }} dest=/etc/timezone owner=root group=root mode=0644 backup=yes
  notify: update timezone
  tags: ['custom','rename']

- name: Reconfigure openssh-server
  shell: rm -f /etc/ssh/*key* && dpkg-reconfigure openssh-server
  tags: ['rename']
  notify: Reboot device

- name: Shorten GRUB_TIMEOUT
  lineinfile:
    dest:       /etc/default/grub
    state:      present
    backup:     yes
    regexp:     '^GRUB_TIMEOUT=.*'
    line:       'GRUB_TIMEOUT=0'
  notify: Update grub
  when: (ansible_architecture == 'x86_64' or ansible_architecture == 'i386') and ansible_dns.domain|default(omit) != "{{ crashbook_dns_domain }}" 
  tags: ['master','custom']
