---
- name: Make sure central_server fingerprint is known here too (tincmaster.bsf-intranet.org)
  known_hosts:
    path: /etc/ssh/ssh_known_hosts
    name: tincmaster.bsf-intranet.org
    key: "{{ item }}"
  with_items:
    - "|1|k6Bn9V3K3wHyOuyohORNL0enyo4=|aGQKUHHUmu/W4VA4QzYYZxNf5/o= ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC3ZSPUHn2fbrLu/2z6Px54z7PFObdejHbyC8HGawDIoDiZ47Rjh0P5CRrsfTWgpabZW3RJ0YtcY5NSilbZ1D8KmiQH3EFl/fDrRsk8yDpo8rF27iT4locj10/KZp9i2FqCAswnjw37CNdATBdTbHjB319/hIGJGPGcXVPz7Cx4oHKPtL4MfDxTKlNbUALAyUfLCGLXcYeQj750/iCilA+zO0hWVGeP/s6R5tg0/IC4Ru2sP6Xqi4kox1GmS6ZmqBgNr2oZlwGGWx//xo/KscePkscAiBvcs9NDP5b5ZsKx5jRo0U8jzU4N4tRVU21mYFSPY54DcKmSeNrSILX1EUt5"
    - "|1|5wQ8K91rb0buUNSHR2r/c3FQNlw=|5sL6MKifgddaBiCCoEe1lsGjr8k= ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBGIi+qKYc46Og0VhD0cCc8jh/dGGoKOOr6Ojo0nWnwo08V7rliEK/FJQ2Lbq6N1CoLowLPEjMuHsN7x6JZO8MKE="
- name: Make sure central_server fingerprint is known here too (tincmaster.wan.bsf-intranet.org)
  known_hosts:
    path: /etc/ssh/ssh_known_hosts
    name: tincmaster.wan.bsf-intranet.org
    key: "{{ item }}"
  with_items:
    - "|1|MuTRgcW3AO0XWXGSx9cCtZOdL9E=|DwuyWCX0AZ6tbwQKz49hXC/L9lk= ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC3ZSPUHn2fbrLu/2z6Px54z7PFObdejHbyC8HGawDIoDiZ47Rjh0P5CRrsfTWgpabZW3RJ0YtcY5NSilbZ1D8KmiQH3EFl/fDrRsk8yDpo8rF27iT4locj10/KZp9i2FqCAswnjw37CNdATBdTbHjB319/hIGJGPGcXVPz7Cx4oHKPtL4MfDxTKlNbUALAyUfLCGLXcYeQj750/iCilA+zO0hWVGeP/s6R5tg0/IC4Ru2sP6Xqi4kox1GmS6ZmqBgNr2oZlwGGWx//xo/KscePkscAiBvcs9NDP5b5ZsKx5jRo0U8jzU4N4tRVU21mYFSPY54DcKmSeNrSILX1EUt5"
    - "|1|4ClcyCUukXaLaq1TMNKpTQfjdaE=|7gVoAGo/hG6AD703TsW5zK4toOQ= ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBGIi+qKYc46Og0VhD0cCc8jh/dGGoKOOr6Ojo0nWnwo08V7rliEK/FJQ2Lbq6N1CoLowLPEjMuHsN7x6JZO8MKE="

- name: check we can use /dev/net/tun
  stat: path=/dev/net/tun
  register: tundevice
- name: Sorry, tinc requires /dev/net/tun. Aborting.
  fail: msg="no /dev/net/tun device found."
  when: tundevice.stat.exists == false

- name: ensure custom facts directory exists
  file: >
    path=/etc/ansible/facts.d
    recurse=yes
    state=directory

- name: install custom fact module for IP address
  template: >
    src=tinc_facts.sh.j2
    dest=/etc/ansible/facts.d/tinc_facts.fact
    mode=0755

- name: reload ansible_local
  setup: filter=ansible_local

- debug: msg="{{ ansible_local.tinc_facts.vpn_ip }}"

- name: build a hostname for tinc, which doesn't like hyphens
  set_fact: tinc_localhost_name="{{ ansible_hostname | replace("-", "_") }}"

- name: install rsync
  apt: >
    name=rsync
    state=present
    update_cache=yes
    cache_valid_time=3600

- name: install tinc
  apt: >
    name=tinc
    state=present
    update_cache=yes
    cache_valid_time=3600

# iptables module appears in ansible 2.0
- name: Open tinc ports in firewall
  shell: for port in 655 656 ; do for proto in tcp udp ; do for chain in INPUT OUTPUT ; do iptables -A $chain -m $proto -p $proto --dport $port -j ACCEPT ; done ; done ; done

- name: ensure tinc vpn name directory exists
  file: >
    path=/etc/tinc/{{ vpn_name }}/hosts
    recurse=True
    state=directory

- name: ensure tinc.conf exists for vpn name
  template: >
    src=tinc.conf.j2
    dest=/etc/tinc/{{ vpn_name }}/tinc.conf
  notify: hello world

- name: Get wlan1 IP address when interfaces is up
  set_fact: host_ip_address={{ ansible_wlan1.ipv4.address }}
  when: ansible_wlan1.ipv4.address is defined

- name: Get eth0 IP address when interface is up
  set_fact: host_ip_address={{ ansible_eth0.ipv4.address }}
  when: ansible_eth0.ipv4.address is defined

- name: ensure tinc address is properly set in tinc host file
  lineinfile: >
    dest=/etc/tinc/{{ vpn_name }}/hosts/{{ tinc_localhost_name }}
    regexp='^Address'
    line="Address = {{ host_ip_address }}"
    create=yes
  notify:
    - reload tinc
    - hello world

- name: ensure subnet ip address is properly set in tinc host file
  lineinfile: >
    dest=/etc/tinc/{{ vpn_name }}/hosts/{{ tinc_localhost_name }}
    regexp='^Subnet'
    line="Subnet = {{ ansible_local.tinc_facts.vpn_ip }}/32"
    create=yes
  notify:
    - reload tinc
    - hello world

- name: add pubkeys for central nodes
  copy: src=hosts/{{ item }} dest=/etc/tinc/{{ vpn_name }}/hosts/{{ item }}
  with_items:
    - buildbot
    - tincmaster

- name: set default options for tinc
  template: >
    src=default.j2
    dest=/etc/default/tinc
  notify:
    - reload tinc

- name: create /etc/tinc/nets.boot file from template
  template: >
    src=nets.boot.j2
    dest=/etc/tinc/nets.boot
  notify:
    - restart tinc

- name: create tinc private key
  shell: tincd -n {{ vpn_name }} -K4096
  args:
    creates: /etc/tinc/{{ vpn_name }}/rsa_key.priv

- name: create tinc-up file
  template: >
    src=tinc-up.j2
    dest=/etc/tinc/{{ vpn_name }}/tinc-up
    mode=0755
  notify:
    - reload tinc
    - hello world

- name: create tinc-down file
  template: >
    src=tinc-down.j2
    dest=/etc/tinc/{{ vpn_name }}/tinc-down
    mode=0755
  notify:
    - reload tinc

- name: Make sure tinc logs are rotated
  copy: src=tinc.logrotate dest=/etc/logrotate.d/tinc mode=0644

- name: send the public key to central nodes
  shell: rsync -azP -e 'ssh -p 443' /etc/tinc/{{ vpn_name }}/hosts/{{tinc_localhost_name }}  {{ central_server_user }}@{{ central_server }}:/ansible/tinc-{{ vpn_name }}/
