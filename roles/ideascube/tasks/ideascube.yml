---
- include_vars: group_vars/{{ ansible_architecture }}.yml
  tags: ['master', 'custom']

- name: Configure the ideascube package repository
  template: src=ideascube.list.j2 dest=/etc/apt/sources.list.d/ideascube.list owner=root group=root mode=644
  tags: ['master', 'custom', 'update']

- name: Install ideascube dependencies
  apt: name=python3-minimal state=present
  tags: ['master', 'update']

- name: Get ideascube installed (versions.stdout_lines.0) et candidate (versions.stdout_lines.1) version 
- raw: LANG=C apt-cache policy ideascube | awk ' $1~/Installed|Candidate/ { print $2 }' 
  register: versions

- set_fact: ideascube_installed="{{ versions.stdout_lines.0 }}"
  tags: 
    - update

- set_fact: ideascube_candidate="{{ versions.stdout_lines.1 }}"
  tags: 
    - update

- name: Allow unauthenticated packages
  lineinfile: dest=/etc/apt/apt.conf.d/9999IDEASCUBEISABADBADBOY line='APT::Get::AllowUnauthenticated "true";' create=yes
  tags: ['master', 'custom', 'update']

#### Install last ideascube package

# - name: Install the ideascube package
#   apt: name=ideascube state=latest update_cache=yes force=yes dpkg_options="force-confnew"
#   register: is_upgraded
#   tags: ['master', 'custom','update']

#### Line below don't upgrade ideascube version anymore

- name: Install ideascube 0.17 package
  apt: name=ideascube=0.17.0 update_cache=yes force=yes dpkg_options="force-confnew"
  tags: ['master', 'custom']

- name: Include task needed when using an external hard drive
  include: ext_hdd.yml
  when: (ansible_architecture == "armhf" or ansible_architecture == "armv7l")
    and sda1.stat.isblk == True

- block:

  - name: Backup data before upgrading
    shell: cp /var/ideascube/main/default.sqlite /var/ideascube/main/default.sqlite-{{ ideascube_installed }}-{{ ansible_date_time["date"] }}-{{ ansible_date_time["time"] }}

  - name: upgrade ideascube 0.17.0 if ideascube >= 0.14.0
    apt: name=ideascube=0.17.0 update_cache=yes force=yes dpkg_options="force-confnew"

  when: ideascube_installed | version_compare('0.14.0', '>=')
  register: is_upgraded
  tags:
    - update

- block:

  - name: Backup data before upgrading
    shell: cp /var/ideascube/main/default.sqlite /var/ideascube/main/default.sqlite-{{ ideascube_installed }}-{{ ansible_date_time["date"] }}-{{ ansible_date_time["time"] }}

  - name: upgrade ideascube to 0.12.2 if ideascube < 0.13.0
    apt: name=ideascube=0.12.2 update_cache=yes force=yes dpkg_options="force-confnew"

  when: ideascube_installed | version_compare('0.13.0', '<')
  register: is_upgraded
  tags:
    - update

- block:

  - name: Backup data before upgrading
    shell: cp /var/ideascube/main/default.sqlite /var/ideascube/main/default.sqlite-{{ ideascube_installed }}-{{ ansible_date_time["date"] }}-{{ ansible_date_time["time"] }}

  - name: freeze ideascube to 0.13.0 if ideascube = 0.13.0
    apt: name=ideascube=0.13.0 update_cache=yes force=yes dpkg_options="force-confnew"

  when: ideascube_installed | version_compare('0.13.0', '==')
  register: is_upgraded
  tags:
    - update

#### End 

- name: Remove the unauthenticated hack
  file: path=/etc/apt/apt.conf.d/9999IDEASCUBEISABADBADBOY state=absent
  tags: ['master', 'custom', 'update']

- name: Enable cards on homepage for ideascube upgrading from < 0.13.0
  become: yes
  become_user: ideascube
  command: ideascube reset_home
  when: ideascube_installed | version_compare('0.13.0', '<')
    and is_upgraded.changed == True
  tags:
    - update

# Add settings and conf
- name: Check if configuration file exist for Ideascube
  stat: path=/usr/share/python/ideascube/lib/python3.4/site-packages/ideascube/conf/{{ generic_project_name |replace("-", "_") }}.py
  register: conf_file
  tags: ['custom','rename','update']

- name: Set IDEASCUBE_ID variable
  set_fact: ideascube_id={{ generic_project_name |replace("-", "_") }}
  when: conf_file.stat.exists == True
  tags:
    - update

- name: Set IDEASCUBE_ID variable
  set_fact: ideascube_id={{ ideascube_project_name }}
  when: conf_file.stat.exists == True
  tags: ['custom','rename']

- name: Set IDEASCUBE_ID variable for koombook
  set_fact: ideascube_id=kb
  when: (ansible_architecture == 'armhf' or ansible_architecture == 'armv7l')
    and conf_file.stat.exists == False
  tags: ['custom','rename','update']

- name: Set IDEASCUBE_ID variable for ideasbox
  set_fact: ideascube_id=idb
  when: ansible_architecture == "x86_64" and conf_file.stat.exists == False
  tags: ['custom','rename','update']

- name: Change IDEASCUBE_ID
  lineinfile: dest=/etc/default/ideascube
              regexp='IDEASCUBE_ID='
              line='IDEASCUBE_ID={{ ideascube_id }}'
              state=present
  notify: restart uwsgi
  tags: ['custom','rename','update']

- name: Add DEBUG
  lineinfile: dest=/etc/default/ideascube
              regexp='DEBUG='
              line='DEBUG='
              state=present
  notify: restart uwsgi
  tags:
    - update

- name: Remove linsting on 443 because the port is alredy used by sslh
  lineinfile: dest=/etc/nginx/sites-available/ideascube regexp='443' state=absent
  notify: restart nginx
  tags: ['master', 'custom', 'update']

- name: Create simLink
  file: src=/etc/uwsgi/apps-available/ideascube.ini dest=/etc/uwsgi/apps-enabled/ideascube.ini state=link
  tags: 
    - master

- name: Ensure that Ideascube folder belong the ideascube user 
  file: path=/var/ideascube/main/ owner={{ username }} group={{ username }} recurse=yes state=directory
  tags: 
    - update

- name: Set Ideascube name
  become: yes
  become_user: ideascube
  command: ideascube config set server site-name {{ hostname }}
  tags: ['master', 'custom']

- name: Get ideascube version
  shell: dpkg-query -W  ideascube  | awk '{print $2}' ; echo
  register: ideascube_newversion
  tags: ['master', 'custom', 'update']

- debug: msg="ideascube {{ ideascube_newversion.stdout }} is now the current version."
  tags: ['master', 'custom', 'update']

- name: Update catalog 
  become: yes
  become_user: ideascube
  command: ideascube catalog cache update
  when: ideascube_installed | version_compare('0.13.0', '>') 
    and ideascube_newversion.stdout | version_compare('0.15.0', '>=')
    and is_upgraded.changed == True
  tags:
    - update
